body {
    padding: 100px 0;
}

.section-bg-pink {
    background-color: mistyrose;
    padding: 60px 0;
}

.section-bg-white {
    background-color: white;
    padding: 60px 0;
}

/* 
Position relative will display the element exactly where it would appear in the flow normally.
Once we add offset values, the element will move relative to its own original position.
Space is still reserved for this element.
*/
.example-relative .headline {
    position: relative;
    top: 50px;
    left: 50px;
}

/* Position absolute */
/*
With position absolute we take the element out of the flow -
this means no space is reserved for the element.
We need to take into account that it might overlap content and make it difficult to read.
When we specify offset values (top left right bottom)
the element is positioned relative to the first parent that is position (
    that is an element that has position other than static
)
*/
.example-absolute {
    position: relative;
    border: 1px solid red;
}

.example-absolute .headline {
    position: absolute;
    top: 50px;
    left: 50px;
}

/* Position fixed */
/* 
When element is positioned fixed, 
it will be taken out of the normal document flow
and no space is reserved.
When we add offset values (top, left, bottom, right)
the element is positioned relative to the viewport.
*/
.example-fixed .headline{
    position: fixed;
}

.chat {
    position: fixed;
    z-index: 1;
    bottom: 32px;
    right: 32px;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: white;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}

.chat-text {
    position: absolute;
    top: 40px;
    left: 34px;
}

/* Card */
.card {
    position: relative;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    background-color: white;
    padding: 20px 65px 20px 20px ;
    max-width: 400px;
    margin: 0 auto;
    font-size: 1.8rem;
}

.badge {
    position: absolute;
    top: 20px;
    right: 0;
    background-color: rebeccapurple;
    padding: 8px 24px;
    color: white;
    font-weight: bold;
    font-size: 0.5em;
    text-transform: uppercase;
}

/* Stacking order with z-index */
.example-z {
    position: relative;
    padding: 0;
    /*
    Since all the children are taken out of the flow,
    and the size of this section will be 0,
    we need to give it a fixed height, so it takes some space
    */
    height: 300px;
}

.box {
    position: absolute;
    width: 200px;
    height: 200px;
    background-color: mistyrose;
    border: 1px solid black;
}

.box-num {
    display: inline-block;
    padding: 16px;
    font-size: 2.4rem;
    font-weight: bold;
}

/* 
Positioning an element will create a stacking order.
If we dont specify a z-index, 
the order will be the order in which the elements appear in the HTML.
Once we add z-index, the order will be determined by the value.
The higher the number, the closer to the top of the stack the element will be.
*/
.box-1 {
    top: 0;
    left: 30px;
    z-index: 10;
}

.box-2 {
    top: 30px;
    left: 60px;
}

.box-3 {
    top: 60px;
    left: 90px;
    z-index: 20;
}